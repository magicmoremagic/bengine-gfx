#include "pch.hpp"
#include "image_view.hpp"

namespace be::gfx {

///////////////////////////////////////////////////////////////////////////////
ImageView::ImageView()
   : storage_(&TextureStorage::nil),
     layer_(0),
     face_(0),
     level_(0) { }

///////////////////////////////////////////////////////////////////////////////
TextureStorage& ImageView::storage() {
   return *storage_;
}

///////////////////////////////////////////////////////////////////////////////
const TextureStorage& ImageView::storage() const {
   return *storage_;
}

///////////////////////////////////////////////////////////////////////////////
const ImageFormat& ImageView::format() const {
   return format_;
}

///////////////////////////////////////////////////////////////////////////////
ImageView::operator bool() const {
   return storage_->size() > 0;
}

///////////////////////////////////////////////////////////////////////////////
bool ImageView::empty() const {
   return storage_->size() == 0;
}

///////////////////////////////////////////////////////////////////////////////
std::size_t ImageView::size() const {
   return data_.size();
}

///////////////////////////////////////////////////////////////////////////////
UC* ImageView::data() {
   return data_.get();
}
///////////////////////////////////////////////////////////////////////////////
const UC* ImageView::data() const {
   return data_.get();
}

///////////////////////////////////////////////////////////////////////////////
ImageView::operator Buf<UC>() {
   return Buf<UC>(data_.get(), data_.size());
}

///////////////////////////////////////////////////////////////////////////////
ImageView::operator Buf<const UC>() const {
   return Buf<const UC>(data_.get(), data_.size());
}

///////////////////////////////////////////////////////////////////////////////
std::size_t ImageView::layer() const {
   return layer_;
}

///////////////////////////////////////////////////////////////////////////////
std::size_t ImageView::face() const {
   return face_;
}

///////////////////////////////////////////////////////////////////////////////
std::size_t ImageView::level() const {
   return level_;
}

///////////////////////////////////////////////////////////////////////////////
ImageView::block_size_type ImageView::block_size() const {
   return storage_->block_size();
}

///////////////////////////////////////////////////////////////////////////////
std::size_t ImageView::line_span() const {
   return storage_->line_span(level_);
}

///////////////////////////////////////////////////////////////////////////////
std::size_t ImageView::plane_span() const {
   return storage_->plane_span(level_);
}

///////////////////////////////////////////////////////////////////////////////
ImageView::block_dim_type ImageView::block_dim() const {
   return storage_->block_dim();
}

///////////////////////////////////////////////////////////////////////////////
const ivec3& ImageView::dim() const {
   return storage_->dim(level_);
}

///////////////////////////////////////////////////////////////////////////////
const ivec3& ImageView::dim_blocks() const {
   return storage_->dim_blocks(level_);
}

} // be::gfx
