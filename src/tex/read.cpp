#include "tex/pch.hpp"
#include "tex/read.hpp"
#include <be/util/files.hpp>

namespace be::gfx::tex {
namespace {

} // ()

///////////////////////////////////////////////////////////////////////////////
TextureFileInfo read_info(const Buf<const UC>& buf) {
   // TODO
   return TextureFileInfo();
}

///////////////////////////////////////////////////////////////////////////////
TextureFileInfo read_info(Path path) {
   return read_info(util::get_file_contents_buf(path));
}

///////////////////////////////////////////////////////////////////////////////
Texture read_texture(const Buf<const UC>& buf) {
   // TODO
   return Texture();
}

///////////////////////////////////////////////////////////////////////////////
bool read_texture(const Buf<const UC>& buf, TextureView& dest) {
   // TODO
   return false;
}

///////////////////////////////////////////////////////////////////////////////
Texture read_texture(Path path) {
   return read_texture(util::get_file_contents_buf(path));
}

///////////////////////////////////////////////////////////////////////////////
bool read_texture(Path path, TextureView& dest) {
   return read_texture(util::get_file_contents_buf(path), dest);
}

///////////////////////////////////////////////////////////////////////////////
Texture read_texture(TextureFileFormat type, const Buf<const UC>& buf) {
   // TODO
   return Texture();
}

///////////////////////////////////////////////////////////////////////////////
bool read_texture(TextureFileFormat type, const Buf<const UC>& buf, TextureView& dest) {
   // TODO
   return false;
}

///////////////////////////////////////////////////////////////////////////////
Texture read_texture(TextureFileFormat type, Path path) {
   return read_texture(type, util::get_file_contents_buf(path));
}

///////////////////////////////////////////////////////////////////////////////
bool read_texture(TextureFileFormat type, Path path, TextureView& dest) {
   return read_texture(type, util::get_file_contents_buf(path), dest);
}

///////////////////////////////////////////////////////////////////////////////
Image read_image(const Buf<const UC>& buf) {
   // TODO
   return Image();
}

///////////////////////////////////////////////////////////////////////////////
bool read_image(const Buf<const UC>& buf, ImageView& dest) {
   // TODO
   return false;
}

///////////////////////////////////////////////////////////////////////////////
Image read_image(Path path) {
   return read_image(util::get_file_contents_buf(path));
}

///////////////////////////////////////////////////////////////////////////////
bool read_image(Path path, ImageView& dest) {
   return read_image(util::get_file_contents_buf(path), dest);
}

///////////////////////////////////////////////////////////////////////////////
Image read_image(TextureFileFormat type, const Buf<const UC>& buf) {
   // TODO
   return Image();
}

///////////////////////////////////////////////////////////////////////////////
bool read_image(TextureFileFormat type, const Buf<const UC>& buf, ImageView& dest) {
   // TODO
   return false;
}

///////////////////////////////////////////////////////////////////////////////
Image read_image(TextureFileFormat type, Path path) {
   return read_image(type, util::get_file_contents_buf(path));
}

///////////////////////////////////////////////////////////////////////////////
bool read_image(TextureFileFormat type, Path path, ImageView& dest) {
   return read_image(type, util::get_file_contents_buf(path), dest);
}

} // be::gfx::tex
